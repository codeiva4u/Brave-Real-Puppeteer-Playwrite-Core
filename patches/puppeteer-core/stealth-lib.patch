--- a/lib/cjs/puppeteer/common/util.js	
+++ b/lib/cjs/puppeteer/common/util.js	
@@ -264,6 +264,10 @@
  * @internal
  */
 function getSourceUrlComment(url) {
+    // rebrowser-stealth: enhanced source URL spoofing
+    if (process.env['REBROWSER_STEALTH_SOURCE_URL'] !== '0') {
+        const stealthUrls = ['jquery-3.6.0.min.js', 'bootstrap.min.js', 'lodash.min.js', 'axios.min.js', 'react.production.min.js'];
+        url = process.env['REBROWSER_STEALTH_SOURCE_URL'] || stealthUrls[Math.floor(Math.random() * stealthUrls.length)];
+    }
     // rebrowser-patches: change sourceUrl to generic script name
     if (process.env['REBROWSER_PATCHES_SOURCE_URL'] !== '0') {
         url = process.env['REBROWSER_PATCHES_SOURCE_URL'] || 'app.js';
     }

--- a/lib/cjs/puppeteer/cdp/ExecutionContext.js
+++ b/lib/cjs/puppeteer/cdp/ExecutionContext.js
@@ -335,6 +335,130 @@
     async evaluateHandle(pageFunction, ...args) {
         return await this.#evaluate(false, pageFunction, ...args);
     }
+    // rebrowser-stealth: inject comprehensive stealth scripts
+    #getStealthScript() {
+        return `
+            // Navigator stealth spoofing
+            (function() {
+                // Remove webdriver property completely
+                if ('webdriver' in navigator) {
+                    delete navigator.webdriver;
+                }
+                
+                Object.defineProperty(navigator, 'webdriver', {
+                    get: () => undefined,
+                    configurable: true,
+                    enumerable: false
+                });
+                
+                // Realistic plugins array
+                const realisticPlugins = [
+                    { name: 'Chrome PDF Plugin', filename: 'internal-pdf-viewer', description: 'Portable Document Format' },
+                    { name: 'Chrome PDF Viewer', filename: 'mhjfbmdgcfjbbpaeojofohoefgiehjai', description: '' },
+                    { name: 'Native Client', filename: 'internal-nacl-plugin', description: '' }
+                ];
+                
+                Object.defineProperty(navigator, 'plugins', {
+                    get: () => realisticPlugins,
+                    configurable: true
+                });
+                
+                Object.defineProperty(navigator, 'languages', {
+                    get: () => ['en-US', 'en'],
+                    configurable: true
+                });
+                
+                // Remove chrome runtime
+                if (window.chrome) {
+                    if (window.chrome.runtime) delete window.chrome.runtime;
+                    if (window.chrome.loadTimes) delete window.chrome.loadTimes;
+                    if (window.chrome.csi) delete window.chrome.csi;
+                }
+                
+                // Canvas fingerprint spoofing
+                const canvasProto = HTMLCanvasElement.prototype;
+                const originalToDataURL = canvasProto.toDataURL;
+                canvasProto.toDataURL = function(...args) {
+                    const result = originalToDataURL.apply(this, args);
+                    // Add minimal entropy
+                    return result.replace(/^data:image\\/png;base64,/, 
+                        'data:image/png;base64,' + btoa(Math.random().toString()).substring(0, 2));
+                };
+                
+                // WebGL spoofing
+                const webglContexts = [WebGLRenderingContext];
+                if (typeof WebGL2RenderingContext !== 'undefined') {
+                    webglContexts.push(WebGL2RenderingContext);
+                }
+                
+                webglContexts.forEach(WebGLContext => {
+                    if (!WebGLContext.prototype) return;
+                    
+                    const originalGetParameter = WebGLContext.prototype.getParameter;
+                    WebGLContext.prototype.getParameter = function(parameter) {
+                        const gl = this;
+                        switch (parameter) {
+                            case gl.VENDOR:
+                                return 'Google Inc.';
+                            case gl.RENDERER:
+                                return 'ANGLE (Intel(R) HD Graphics 620 Direct3D11 vs_5_0 ps_5_0)';
+                            case 37445: // UNMASKED_VENDOR_WEBGL
+                                return 'Google Inc.';
+                            case 37446: // UNMASKED_RENDERER_WEBGL
+                                return 'ANGLE (Intel(R) HD Graphics 620 Direct3D11 vs_5_0 ps_5_0)';
+                            default:
+                                return originalGetParameter.call(this, parameter);
+                        }
+                    };
+                });
+                
+                // Remove automation indicators
+                delete window._phantom;
+                delete window.__nightmare;
+                delete window.callPhantom;
+                delete window._selenium;
+                delete window.__selenium_unwrapped;
+                delete window.__puppeteer__;
+                delete window.puppeteer;
+                delete window.__playwright__;
+                delete window.playwright;
+                
+                // Screen spoofing
+                Object.defineProperty(screen, 'width', {
+                    get: () => 1920,
+                    configurable: true
+                });
+                
+                Object.defineProperty(screen, 'height', {
+                    get: () => 1080,
+                    configurable: true
+                });
+                
+                Object.defineProperty(screen, 'availWidth', {
+                    get: () => 1920,
+                    configurable: true
+                });
+                
+                Object.defineProperty(screen, 'availHeight', {
+                    get: () => 1040,
+                    configurable: true
+                });
+            })();
+        `;
+    }
     async #evaluate(returnByValue, pageFunction, ...args) {
+        // rebrowser-stealth: inject stealth script before every evaluation
+        if (process.env['REBROWSER_STEALTH_MODE'] !== '0' && this.#id > 0) {
+            try {
+                await this.#client.send('Runtime.evaluate', {
+                    expression: this.#getStealthScript(),
+                    contextId: this.#id,
+                    returnByValue: false,
+                    awaitPromise: false,
+                    userGesture: false
+                });
+            } catch (error) {
+                // Ignore stealth injection errors
+                process.env['REBROWSER_STEALTH_DEBUG'] && console.log('[rebrowser-stealth] injection error:', error.message);
+            }
+        }
         // rebrowser-patches: context id is missing, acquire it and try again
         if (this.#id < 0) {
             await this.acquireContextId();