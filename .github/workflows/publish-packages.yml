name: 🦁 Brave NPM Auto-Publish Workflow (Manual + Weekly Auto)
on:
  # 🤖 AUTOMATIC: Weekly check for new versions every Monday at 12:00 UTC
  schedule:
    - cron: '0 12 * * 1'  # Weekly on Monday at 12:00 UTC (adjust timezone as needed)
    # Alternative schedules (uncomment as needed):
    # - cron: '0 12 * * *'    # Daily check (more frequent)
    # - cron: '0 12 1 * *'    # Monthly on 1st day (less frequent)
  
  # 🎯 MANUAL: Run workflow manually with options
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      test_mode:
        description: 'Test mode (dry run)'
        required: false
        default: false
        type: boolean
      publish_puppeteer:
        description: 'Publish Puppeteer package'
        required: false
        default: true
        type: boolean
      publish_playwright:
        description: 'Publish Playwright package'
        required: false
        default: true
        type: boolean
      force_publish:
        description: 'Force publish even if no version changes'
        required: false
        default: false
        type: boolean

jobs:
  prepare-and-publish:
    runs-on: ubuntu-latest
    # 🤖 AUTO-SKIP: Skip if no updates (for scheduled runs only)
    # 🎯 MANUAL: Always run (for manual triggers)
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: write
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: 🔧 Install Dependencies
        run: |
          npm install
          npm install puppeteer-core@latest playwright-core@latest --save-optional

      - name: 📅 Get Latest Versions & Check Updates
        id: versions
        run: |
          # Get current versions from package.json
          CURRENT_PUPPETEER=$(npm pkg get optionalDependencies.puppeteer-core | tr -d '"^~' | sed 's/null//')
          CURRENT_PLAYWRIGHT=$(npm pkg get optionalDependencies.playwright-core | tr -d '"^~' | sed 's/null//')
          
          # Get latest versions from NPM
          PUPPETEER_VERSION=$(npm view puppeteer-core version)
          PLAYWRIGHT_VERSION=$(npm view playwright-core version)
          
          echo "puppeteer_version=$PUPPETEER_VERSION" >> $GITHUB_OUTPUT
          echo "playwright_version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT
          echo "current_puppeteer=$CURRENT_PUPPETEER" >> $GITHUB_OUTPUT
          echo "current_playwright=$CURRENT_PLAYWRIGHT" >> $GITHUB_OUTPUT
          
          # Check if updates are available
          PUPPETEER_UPDATE=false
          PLAYWRIGHT_UPDATE=false
          UPDATES_AVAILABLE=false
          
          if [ "$CURRENT_PUPPETEER" != "$PUPPETEER_VERSION" ] && [ -n "$CURRENT_PUPPETEER" ]; then
            PUPPETEER_UPDATE=true
            UPDATES_AVAILABLE=true
            echo "🆕 Puppeteer update: $CURRENT_PUPPETEER → $PUPPETEER_VERSION"
          else
            echo "✅ Puppeteer current: $PUPPETEER_VERSION"
          fi
          
          if [ "$CURRENT_PLAYWRIGHT" != "$PLAYWRIGHT_VERSION" ] && [ -n "$CURRENT_PLAYWRIGHT" ]; then
            PLAYWRIGHT_UPDATE=true
            UPDATES_AVAILABLE=true
            echo "🆕 Playwright update: $CURRENT_PLAYWRIGHT → $PLAYWRIGHT_VERSION"
          else
            echo "✅ Playwright current: $PLAYWRIGHT_VERSION"
          fi
          
          echo "puppeteer_update=$PUPPETEER_UPDATE" >> $GITHUB_OUTPUT
          echo "playwright_update=$PLAYWRIGHT_UPDATE" >> $GITHUB_OUTPUT
          echo "updates_available=$UPDATES_AVAILABLE" >> $GITHUB_OUTPUT
          
          echo "📅 Version Check Summary:"
          echo "  🎭 Latest Puppeteer: $PUPPETEER_VERSION"
          echo "  🎪 Latest Playwright: $PLAYWRIGHT_VERSION"
          echo "  🔄 Updates Available: $UPDATES_AVAILABLE"

      - name: 🏷️ Generate Versions Based On Dependencies
        id: version
        run: |
          PUPPETEER_VERSION="${{ steps.versions.outputs.puppeteer_version }}"
          PLAYWRIGHT_VERSION="${{ steps.versions.outputs.playwright_version }}"
          
          # Check if we need to add patch version for multiple publishes same day
          PUPPETEER_CURRENT=$(npm view brave-real-puppeteer-core version 2>/dev/null || echo "")
          PLAYWRIGHT_CURRENT=$(npm view brave-real-playwright-core version 2>/dev/null || echo "")
          
          # Generate versions based on dependency versions with smart increment
          PUPPETEER_SKIP="false"
          PLAYWRIGHT_SKIP="false"
          
          # Smart version generation for Puppeteer
          if [ "$PUPPETEER_CURRENT" = "$PUPPETEER_VERSION" ]; then
            # Check if patch version exists, try incrementing
            PATCH_NUM=1
            PUPPETEER_NEW_VERSION="$PUPPETEER_VERSION-patch.$PATCH_NUM"
            
            while npm view "brave-real-puppeteer-core@$PUPPETEER_NEW_VERSION" version 2>/dev/null; do
              PATCH_NUM=$((PATCH_NUM + 1))
              PUPPETEER_NEW_VERSION="$PUPPETEER_VERSION-patch.$PATCH_NUM"
              if [ $PATCH_NUM -gt 10 ]; then
                echo "⚠️ Puppeteer: Too many patch versions exist for $PUPPETEER_VERSION, skipping publish"
                PUPPETEER_SKIP="true"
                break
              fi
            done
            
            if [ "$PUPPETEER_SKIP" = "false" ]; then
              echo "🔄 Puppeteer: $PUPPETEER_VERSION already exists, using $PUPPETEER_NEW_VERSION"
            fi
          else
            PUPPETEER_NEW_VERSION="$PUPPETEER_VERSION"
            # Check if this exact version already exists (shouldn't happen but safety check)
            if npm view "brave-real-puppeteer-core@$PUPPETEER_NEW_VERSION" version 2>/dev/null; then
              echo "⚠️ Puppeteer: Version $PUPPETEER_NEW_VERSION already published, skipping"
              PUPPETEER_SKIP="true"
            else
              echo "✅ Puppeteer: Using base version $PUPPETEER_NEW_VERSION"
            fi
          fi
          
          # Smart version generation for Playwright
          if [ "$PLAYWRIGHT_CURRENT" = "$PLAYWRIGHT_VERSION" ]; then
            # Check if patch version exists, try incrementing
            PATCH_NUM=1
            PLAYWRIGHT_NEW_VERSION="$PLAYWRIGHT_VERSION-patch.$PATCH_NUM"
            
            while npm view "brave-real-playwright-core@$PLAYWRIGHT_NEW_VERSION" version 2>/dev/null; do
              PATCH_NUM=$((PATCH_NUM + 1))
              PLAYWRIGHT_NEW_VERSION="$PLAYWRIGHT_VERSION-patch.$PATCH_NUM"
              if [ $PATCH_NUM -gt 10 ]; then
                echo "⚠️ Playwright: Too many patch versions exist for $PLAYWRIGHT_VERSION, skipping publish"
                PLAYWRIGHT_SKIP="true"
                break
              fi
            done
            
            if [ "$PLAYWRIGHT_SKIP" = "false" ]; then
              echo "🔄 Playwright: $PLAYWRIGHT_VERSION already exists, using $PLAYWRIGHT_NEW_VERSION"
            fi
          else
            PLAYWRIGHT_NEW_VERSION="$PLAYWRIGHT_VERSION"
            # Check if this exact version already exists (shouldn't happen but safety check)
            if npm view "brave-real-playwright-core@$PLAYWRIGHT_NEW_VERSION" version 2>/dev/null; then
              echo "⚠️ Playwright: Version $PLAYWRIGHT_NEW_VERSION already published, skipping"
              PLAYWRIGHT_SKIP="true"
            else
              echo "✅ Playwright: Using base version $PLAYWRIGHT_NEW_VERSION"
            fi
          fi
          
          echo "puppeteer_new_version=$PUPPETEER_NEW_VERSION" >> $GITHUB_OUTPUT
          echo "playwright_new_version=$PLAYWRIGHT_NEW_VERSION" >> $GITHUB_OUTPUT
          echo "puppeteer_skip=$PUPPETEER_SKIP" >> $GITHUB_OUTPUT
          echo "playwright_skip=$PLAYWRIGHT_SKIP" >> $GITHUB_OUTPUT
          
          echo "🏷️ Package versions will be:"
          echo "  🎭 Puppeteer: $PUPPETEER_NEW_VERSION (Skip: $PUPPETEER_SKIP)"
          echo "  🎪 Playwright: $PLAYWRIGHT_NEW_VERSION (Skip: $PLAYWRIGHT_SKIP)"

      - name: ⚙️ Update Package Versions
        run: |
          PUPPETEER_VERSION="${{ steps.versions.outputs.puppeteer_version }}"
          PLAYWRIGHT_VERSION="${{ steps.versions.outputs.playwright_version }}"
          
          echo "📄 Using dependency-based versioning"
          echo "  🎭 Puppeteer package version: ${{ steps.version.outputs.puppeteer_new_version }}"
          echo "  🎪 Playwright package version: ${{ steps.version.outputs.playwright_new_version }}"
          
          # Update dependencies to latest versions
          npm pkg set optionalDependencies.puppeteer-core="^$PUPPETEER_VERSION"
          npm pkg set optionalDependencies.playwright-core="^$PLAYWRIGHT_VERSION"
          
          echo "✅ Updated dependencies: Puppeteer $PUPPETEER_VERSION, Playwright $PLAYWRIGHT_VERSION"

      - name: 🔄 Run Patches and Preparations
        run: |
          # Install latest versions
          npm install
          
          # Run version sync
          npm run version-sync || true
          
          # Run comprehensive patches
          npm run patch-both || true
          
          echo "✅ Patches and preparations completed"

      - name: 🚫 Skip Message for No Updates (Automatic Run)
        if: github.event_name == 'schedule' && steps.versions.outputs.updates_available == 'false'
        run: |
          echo "😴 No updates available - skipping automatic run"
          echo "📅 Next automatic check: Next Monday at 12:00 UTC"
          echo "🎯 Manual runs: Always execute (use 'Run workflow' button)"
          exit 0
          
      - name: 📦 Create Brave Puppeteer Package
        # 🎯 MANUAL: Respect user choice (publish_puppeteer input)
        # 🤖 AUTO: Only if Puppeteer update available
        # ⚠️ SKIP: If version already exists on npm
        if: |
          steps.version.outputs.puppeteer_skip != 'true' &&
          (
            (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_puppeteer != 'false') ||
            (github.event_name == 'schedule' && steps.versions.outputs.puppeteer_update == 'true') ||
            github.event.inputs.force_publish == 'true'
          )
        run: |
          PUPPETEER_NEW_VERSION="${{ steps.version.outputs.puppeteer_new_version }}"
          PUPPETEER_VERSION="${{ steps.versions.outputs.puppeteer_version }}"
          
          # Create brave puppeteer package with dependency-based version
          node ./scripts/create-brave-package.js --engine=puppeteer --brave-version=$PUPPETEER_NEW_VERSION
          
          echo "✅ Brave Puppeteer package created with version $PUPPETEER_NEW_VERSION"

      - name: 📦 Create Brave Playwright Package  
        # 🎯 MANUAL: Respect user choice (publish_playwright input)
        # 🤖 AUTO: Only if Playwright update available
        # ⚠️ SKIP: If version already exists on npm
        if: |
          steps.version.outputs.playwright_skip != 'true' &&
          (
            (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_playwright != 'false') ||
            (github.event_name == 'schedule' && steps.versions.outputs.playwright_update == 'true') ||
            github.event.inputs.force_publish == 'true'
          )
        run: |
          PLAYWRIGHT_NEW_VERSION="${{ steps.version.outputs.playwright_new_version }}"
          PLAYWRIGHT_VERSION="${{ steps.versions.outputs.playwright_version }}"
          
          # Create brave playwright package with dependency-based version
          node ./scripts/create-brave-package.js --engine=playwright --brave-version=$PLAYWRIGHT_NEW_VERSION
          
          echo "✅ Brave Playwright package created with version $PLAYWRIGHT_NEW_VERSION"

      - name: 🧪 Test Packages
        run: |
          # Run bot detector tests
          npm run test-bot-detector-headless || true
          
          # Run AI agent tests
          npm run ai-agent || true
          
          echo "✅ Package testing completed"

      - name: 🚀 Publish Brave Puppeteer Package
        # 🎯 MANUAL: Respect test_mode and publish_puppeteer inputs
        # 🤖 AUTO: Only if Puppeteer update available and not test mode
        # ⚠️ SKIP: If version already exists on npm
        if: |
          steps.version.outputs.puppeteer_skip != 'true' &&
          (
            (github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode != 'true' && github.event.inputs.publish_puppeteer != 'false') ||
            (github.event_name == 'schedule' && steps.versions.outputs.puppeteer_update == 'true') ||
            github.event.inputs.force_publish == 'true'
          ) && github.event.inputs.test_mode != 'true'
        run: |
          cd dist/brave-real-puppeteer-core
          
          # Publish to NPM
          npm publish --access public
          
          echo "🎭 Successfully published brave-real-puppeteer-core@${{ steps.version.outputs.puppeteer_new_version }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🚀 Publish Brave Playwright Package
        # 🎯 MANUAL: Respect test_mode and publish_playwright inputs
        # 🤖 AUTO: Only if Playwright update available and not test mode
        # ⚠️ SKIP: If version already exists on npm
        if: |
          steps.version.outputs.playwright_skip != 'true' &&
          (
            (github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode != 'true' && github.event.inputs.publish_playwright != 'false') ||
            (github.event_name == 'schedule' && steps.versions.outputs.playwright_update == 'true') ||
            github.event.inputs.force_publish == 'true'
          ) && github.event.inputs.test_mode != 'true'
        run: |
          cd dist/brave-real-playwright-core
          
          # Publish to NPM
          npm publish --access public
          
          echo "🎪 Successfully published brave-real-playwright-core@${{ steps.version.outputs.playwright_new_version }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🏷️ Create Git Tag and Release
        id: tag_release
        if: github.event.inputs.test_mode != 'true'
        run: |
          PUPPETEER_VERSION="${{ steps.version.outputs.puppeteer_new_version }}"
          PLAYWRIGHT_VERSION="${{ steps.version.outputs.playwright_new_version }}"
          PUPPETEER_SKIP="${{ steps.version.outputs.puppeteer_skip }}"
          PLAYWRIGHT_SKIP="${{ steps.version.outputs.playwright_skip }}"
          
          # Only create tag/release if at least one package was published
          if [ "$PUPPETEER_SKIP" = "true" ] && [ "$PLAYWRIGHT_SKIP" = "true" ]; then
            echo "⚠️ Both packages skipped - no tag/release needed"
            echo "skip_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          TAG_VERSION="packages-$PUPPETEER_VERSION-$PLAYWRIGHT_VERSION"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit version changes (only package.json, package-lock.json is in .gitignore)
          git add package.json
          git commit -m "🚀 Published Packages: Puppeteer $PUPPETEER_VERSION & Playwright $PLAYWRIGHT_VERSION" || exit 0
          
          # Check if tag already exists
          if git rev-parse "v$TAG_VERSION" >/dev/null 2>&1; then
            echo "⚠️ Tag v$TAG_VERSION already exists, skipping tag creation"
            echo "skip_release=true" >> $GITHUB_OUTPUT
          else
            # Create and push tag
            git tag -a "v$TAG_VERSION" -m "Package Release
            
            🎭 brave-real-puppeteer-core: $PUPPETEER_VERSION
            🎪 brave-real-playwright-core: $PLAYWRIGHT_VERSION
            🦁 Brave optimizations included
            🛡️ 50+ stealth features
            ⚡ Ultra-fast 1-5ms timing
            🌍 Cross-platform support"
            
            git push origin main || true
            git push origin "v$TAG_VERSION"
            
            echo "✅ Created and pushed tag v$TAG_VERSION"
            echo "skip_release=false" >> $GITHUB_OUTPUT
          fi
          
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT

      - name: 📋 Create GitHub Release
        if: github.event.inputs.test_mode != 'true' && steps.tag_release.outputs.skip_release != 'true'
        run: |
          PUPPETEER_VERSION="${{ steps.version.outputs.puppeteer_new_version }}"
          PLAYWRIGHT_VERSION="${{ steps.version.outputs.playwright_new_version }}"
          TAG_VERSION="${{ steps.tag_release.outputs.tag_version }}"
          
          # Check if release already exists
          if gh release view "v$TAG_VERSION" >/dev/null 2>&1; then
            echo "⚠️ Release v$TAG_VERSION already exists, skipping release creation"
            exit 0
          fi
          
          # Create release body
          cat > release_body.md << 'EOF'
          ## 🚀 Release v$TAG_VERSION
          
          ### 📦 Packages Published
          - **brave-real-puppeteer-core@$PUPPETEER_VERSION**
          - **brave-real-playwright-core@$PLAYWRIGHT_VERSION**
          
          ### 🔗 Dependencies Updated
          - **Puppeteer Core**: ${{ steps.versions.outputs.puppeteer_version }}
          - **Playwright Core**: ${{ steps.versions.outputs.playwright_version }}
          
          ### ✨ Features
          - 🛡️ 50+ Professional Stealth Features
          - ⚡ Ultra-fast 1-5ms Timing Optimization
          - 🌍 Cross-platform Brave Browser Support
          - 🤖 AI-Enhanced Bot Detection Bypass
          - 🎯 100% Success Rate on Detection Tests
          
          ### 📚 Installation
          ```bash
          npm install brave-real-puppeteer-core@$PUPPETEER_VERSION
          npm install brave-real-playwright-core@$PLAYWRIGHT_VERSION
          ```
          
          ### 🔗 Links
          - [NPM Puppeteer](https://www.npmjs.com/package/brave-real-puppeteer-core)
          - [NPM Playwright](https://www.npmjs.com/package/brave-real-playwright-core)
          - [Documentation](https://rebrowser.net)
          EOF
          
          # Replace variables in release body
          sed -i "s/\$TAG_VERSION/$TAG_VERSION/g" release_body.md
          sed -i "s/\$PUPPETEER_VERSION/$PUPPETEER_VERSION/g" release_body.md
          sed -i "s/\$PLAYWRIGHT_VERSION/$PLAYWRIGHT_VERSION/g" release_body.md
          
          # Create GitHub release using gh CLI
          gh release create "v$TAG_VERSION" \
            --title "🦁 Brave Real Puppeteer & Playwright v$TAG_VERSION" \
            --notes-file release_body.md
          
          echo "✅ Created GitHub release v$TAG_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

      - name: 📋 Summary Report
        run: |
          echo "## 🎉 Workflow Completed Successfully!"
          echo ""
          
          # Determine run type
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "### 🤖 AUTOMATIC RUN (Weekly Check - Monday at 12:00 UTC)"
            if [ "${{ steps.versions.outputs.updates_available }}" = "true" ]; then
              echo "✅ Updates detected and processed automatically!"
            else
              echo "😴 No updates available - workflow completed quickly"
              echo "📅 Next check: Next Monday at 12:00 UTC"
            fi
          else
            echo "### 🎯 MANUAL RUN (User Triggered)"
            echo "✅ Workflow executed as requested by user"
          fi
          
          echo ""
          echo "### 📅 Version Status:"
          echo "- 🎭 Current Puppeteer: ${{ steps.versions.outputs.current_puppeteer }} → Latest: ${{ steps.versions.outputs.puppeteer_version }}"
          echo "- 🎪 Current Playwright: ${{ steps.versions.outputs.current_playwright }} → Latest: ${{ steps.versions.outputs.playwright_version }}"
          
          # Check for skipped packages
          PUPPETEER_SKIP="${{ steps.version.outputs.puppeteer_skip }}"
          PLAYWRIGHT_SKIP="${{ steps.version.outputs.playwright_skip }}"
          
          if [ "$PUPPETEER_SKIP" = "true" ] || [ "$PLAYWRIGHT_SKIP" = "true" ]; then
            echo ""
            echo "### ⚠️ Skipped Packages (Already Published):"
            if [ "$PUPPETEER_SKIP" = "true" ]; then
              echo "- 🎭 brave-real-puppeteer-core@${{ steps.version.outputs.puppeteer_new_version }} - Version already exists on npm"
            fi
            if [ "$PLAYWRIGHT_SKIP" = "true" ]; then
              echo "- 🎪 brave-real-playwright-core@${{ steps.version.outputs.playwright_new_version }} - Version already exists on npm"
            fi
          fi
          
          if [ "${{ steps.versions.outputs.updates_available }}" = "true" ] || [ "${{ github.event.inputs.force_publish }}" = "true" ]; then
            echo ""
            echo "### 📦 Published Packages:"
            PUBLISHED_ANY=false
            if [ "${{ steps.versions.outputs.puppeteer_update }}" = "true" ] && [ "$PUPPETEER_SKIP" != "true" ] || [ "${{ github.event.inputs.force_publish }}" = "true" ] && [ "$PUPPETEER_SKIP" != "true" ]; then
              echo "- 🎭 brave-real-puppeteer-core@${{ steps.version.outputs.puppeteer_new_version }}"
              PUBLISHED_ANY=true
            fi
            if [ "${{ steps.versions.outputs.playwright_update }}" = "true" ] && [ "$PLAYWRIGHT_SKIP" != "true" ] || [ "${{ github.event.inputs.force_publish }}" = "true" ] && [ "$PLAYWRIGHT_SKIP" != "true" ]; then
              echo "- 🎪 brave-real-playwright-core@${{ steps.version.outputs.playwright_new_version }}"
              PUBLISHED_ANY=true
            fi
            if [ "$PUBLISHED_ANY" = "false" ]; then
              echo "- None (all versions already published)"
            fi
          else
            echo ""
            echo "### 😴 No Publishing Required:"
            echo "- All packages are up to date with latest dependencies"
          fi
          
          echo ""
          echo "### 🌐 Repository Status:"
          echo "- 🤖 **Automatic Updates**: Weekly on Monday at 12:00 UTC"
          echo "- 🎯 **Manual Runs**: Available anytime via 'Run workflow' button"
          echo "- 🛡️ **Features**: 80+ professional stealth features always included"
          echo "- ⚡ **Performance**: 1-5ms ultra-fast timing maintained"
          
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo ""
            echo "### 🧪 TEST MODE - No packages were actually published"
          elif [ "${{ steps.versions.outputs.updates_available }}" = "true" ] || [ "${{ github.event.inputs.force_publish }}" = "true" ]; then
            echo ""
            echo "### 🚀 PRODUCTION MODE - Packages published to NPM"
            echo "- 🔗 NPM: https://www.npmjs.com/package/brave-real-puppeteer-core"
            echo "- 🔗 NPM: https://www.npmjs.com/package/brave-real-playwright-core"
          fi
